
# Add the following bugs and user stories to the 
# productBacklog.txt.
# (If you have already completed some of these in Part 1, 
# mark the OWNER as COMPLETED IN SPRINT 1 in the productBacklog.txt.
# SPRINT 2 MUST INCLUDE ALL OF THE FOLLOWING USER STORIES AND BUGS!!
# You should add and implement any additional user stories that 
# make your program great. Part of your mark will be competitive, 
# with more, great user stories and better UI recognized by marks.

--------------------------------------------------------------------------
TYPE     : USER STORY 2.1 : UTORID
NAME     : Implement Poly Line
OWNER    : 
PRIORITY :
ESTIMATE : 
ISSUE    : YOU FILL THIS ONE IN!!
--------------------------------------------------------------------------
--------------------------------------------------------------------------
TYPE     : BUG 2.1 : UTORID
NAME     : Architecture for drawing shapes can be improved
OWNER    : 
PRIORITY :
ESTIMATE : 
ISSUE    : The architecture can be improved if we implement the Command Design 
Pattern to draw shapes as follows:

The PaintModel should use the command design pattern. 
That is, each shape knows how to draw itself, so there is a single list of 
DrawingCommands maintained by the PaintModel and used by the PaintPanel.
paintComponent simply asks the PaintModel to ask command to execute(g2d).
The simplest way to make this happen is to make each shape implement the 
DrawingCommand interface which requires execute(g2d) to be implemented.
Well sort of.

NOTE: The PaintModel does know how to logically draw itself, so does
know about strokes and pen colors etc. Depending on how much you want
to split off the logical from the GUI, it may not have to know how to 
draw on the screen. This is a subtle difference. For example, the
following logically describes a scene, without actually knowing
how to draw it on the screen (using j2d)...

Color = green
Fill = off
Border = on
BorderWidth = 10
Circle radius 10 at 12,15
Color = red
Fill = on
FillColor = black
Border = on
BorderWidth = 7
Square width 20 at 100,200

If you want to build a more 'logical' PaintModel, you can consider ...

1) Create a mirror hierarchy for Shape, this mirror hirerachy 
has things like DrawableCircle which has a Circle. The DrawableCircle
knows how to draw the instance of Circle it holds. Each Shape will
still need information about its color, and stroke, one way or another.

OR

2) Lookup and apply the Visitor design pattern to the more logical
PaintModel.

--------------------------------------------------------------------------
--------------------------------------------------------------------------
TYPE     : BUG 2.2 : UTORID
NAME     : Architecture for handling shape modifiers can be improved 
OWNER    : 
PRIORITY :
ESTIMATE : 
ISSUE    : The architecture can be improved if we implement the Command Design 
Pattern to handle changes to the graphics contex such as changing drawing 
color, stroke width etc. You can accomplished this by wrapping the changes
to the graphics context in a DrawingCommand. This way these changes can be
added to the Bug 2.1 DrawingCommand list. That is, these new types of 
DrawingCommands appear on PaintPanel's list right along side 
the Shape type DrawingCommands.
--------------------------------------------------------------------------
--------------------------------------------------------------------------
TYPE     : BUG 2.3 : UTORID
NAME     : Architecture behind choosing drawing mode is poor
OWNER    : 
PRIORITY :
ESTIMATE : 
ISSUE    : A better architecture behind selecting a drawing mode can be created 
by implementing the Factory Design Pattern as follows:

The factory design pattern should be used by the paint buttons. 
The factory is responsible for creating different ShapeManipulatorStrategy 
instances (see BUG 2.4). That is, when a button is pressed, the appropriate 
ShapeManipulatorStrategy is created and installed in the PaintPanel. 
Note that you can associate text with a button, even if you 
display an ImageIcon. The string attached to the button causes the right choice 
of object creation.
--------------------------------------------------------------------------
--------------------------------------------------------------------------
TYPE     : BUG 2.4 : UTORID
NAME     : Architecture behind creating shape instances is poor
OWNER    : 
PRIORITY :
ESTIMATE : 
ISSUE    : A better architecture for creating shape instances so that it is 
more flexible, and easier to work with can be created using the Strategy Design 
pattern as follows:

Create class/abstract class/interface  ShapeManipulatorStrategy as well 
as subclasses/implementators for each type of Shape. Call these the
concrete ShapeNamipulatorStrategies

The concrete ShapeManipulatorStrategies are responsible for 

1. Creating instances of Shape and putting them on top of 
   the PaintModel command stack.

2. Understanding how mouse events modify the shape at the top of the 
   PaintModel command stack.

3. Calling the PaintPanel repaint at appropriate times.

This strategy can be put in place either by having PaintPanel's mouse 
events forwarded through PaintPanel into the current strategy, or by 
simply switching the PaintPanel's listeners as appropriate.

--------------------------------------------------------------------------

# COMPLETED USER STORIES/BUGS SHOULD BE KEPT TRACK OF 
# IN THE ORIGINAL PRODUCTBACKLOG.TXT FILE

